<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jhxxs.github.io</id>
    <title>Meaningless</title>
    <updated>2019-09-23T08:28:41.533Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jhxxs.github.io"/>
    <link rel="self" href="https://jhxxs.github.io/atom.xml"/>
    <subtitle>Just a replacement for memories.</subtitle>
    <logo>https://jhxxs.github.io/images/avatar.png</logo>
    <icon>https://jhxxs.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Meaningless</rights>
    <entry>
        <title type="html"><![CDATA[你不知道的JavaScript-1-1作用域]]></title>
        <id>https://jhxxs.github.io/post/你不知道的JavaScript-1-1作用域</id>
        <link href="https://jhxxs.github.io/post/你不知道的JavaScript-1-1作用域">
        </link>
        <updated>2018-07-20T01:10:53.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>买了你不知道的JavaScript系列上卷和中卷，放了快一年都没看，也是时候过一遍了。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>买了你不知道的JavaScript系列上卷和中卷，放了快一年都没看，也是时候过一遍了。</p>
</blockquote>
<!-- more -->
<h2 id="第一章-作用域是什么">第一章 作用域是什么</h2>
<p>一套设计良好的用来存储变量并且之后可以方便地找到这些变量的规则被称为<code>作用域</code>。</p>
<h3 id="12-理解作用域">1.2 理解作用域</h3>
<p>对于<code>var a = 2</code>，在“引擎-编译器-作用域”的流程下，处理如下：</p>
<ol>
<li>对于<code>var a</code>，编译器会查找当前作用域中是否存在同样的声明，有就忽略掉，没有就声明新变量命名为<code>a</code></li>
<li>对于<code>a = 2</code>的赋值操作，引擎会在作用域中查找<code>a</code>变量，然后再赋值</li>
</ol>
<h4 id="123-编译器有话说">1.2.3 编译器有话说</h4>
<p>这里引入LHS和RHS查询概念，意思是left/right-hand side of an assignment。但是LHS应该理解为&quot;赋值操作的目标是谁&quot;和“谁是赋值操作的源头”。<br>
比如</p>
<pre><code class="language-js">    function foo(a) {
        console.log(a); //2
    }
    foo(2);
</code></pre>
<p>RHS查询有：<code>foo()</code>的调用需要找到<code>foo</code>的值，对<code>a</code>进行的查找并将值传给<code>console.log(...)</code>，对<code>console</code>对象的查找。<br>
LHS查询有：隐式的<code>a = 2</code>操作。</p>
<h3 id="13-作用域嵌套">1.3 作用域嵌套</h3>
<p>当一个快或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套，遍历嵌套规则为：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找，直到抵达最外层的全局作用域依然找不到就会停止。这就解释了为什么函数内部可以访问到外部变量的。</p>
<h3 id="14-异常">1.4 异常</h3>
<p>不成功的RHS查询会抛出<code>ReferenceError</code>异常，而不成功LHS查询会自动隐式地创建一个全局变量，该变量使用LHS引用的目标作为标识符。<br>
所以可见</p>
<pre><code class="language-js">    a = 2; //没有声明a，但是非严格模式下不会报错，LHS查询
    console.log(b) //RHS查询，会报错 'b is not defined'
</code></pre>
<p><code>ReferenceError</code>同作用域判别失败相关，而<code>TypeError</code>表示作用域判别失败，但是对结果的操作是非法和不合理的。</p>
<ul>
<li>第一部分第一章对一些概念理解得还算清晰</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[瞎折腾--从搜索到放弃]]></title>
        <id>https://jhxxs.github.io/post/瞎折腾</id>
        <link href="https://jhxxs.github.io/post/瞎折腾">
        </link>
        <updated>2018-01-16T07:44:19.000Z</updated>
        <summary type="html"><![CDATA[<p>时而折腾手机，时而折腾电脑。平日里闲着没事干，就喜欢把各种编辑器玩个转。最先知道的是sublime text，为了装个插件也是百般折腾，后来看到有人说atom对Markdown支持非常不错，于是下载了atom，它的markdown插件简直是神器。又听说vscode受到很多人的赞扬，而且还支持终端，毕竟是巨硬出品，赶快下载了vscode。vscode轻便，我已经很长时间没打开sublime了，什么？你说cmd，那是什么？<br>
怎么把Windows打造得更顺手，且往下看。</p>
]]></summary>
        <content type="html"><![CDATA[<p>时而折腾手机，时而折腾电脑。平日里闲着没事干，就喜欢把各种编辑器玩个转。最先知道的是sublime text，为了装个插件也是百般折腾，后来看到有人说atom对Markdown支持非常不错，于是下载了atom，它的markdown插件简直是神器。又听说vscode受到很多人的赞扬，而且还支持终端，毕竟是巨硬出品，赶快下载了vscode。vscode轻便，我已经很长时间没打开sublime了，什么？你说cmd，那是什么？<br>
怎么把Windows打造得更顺手，且往下看。</p>
<!-- more -->
<h3 id="chocolatey">Chocolatey</h3>
<blockquote>
<p>mac和linux都有自己的包管理器，而windows没有。所以在搭建一些开发环境需要下载某些开发工具时，mac和linux都可以直接在终端里通过命令行安装自己想要的工具。而windows则要满世界的搜索，因为谷歌被墙，用百度搜软件时有时候连官网都找不到。</p>
</blockquote>
<p>后来在不断的寻找过程中，一次偶然的机会我知道了<a href="https://chocolatey.org/" title="The package manager for Windows
Chocolatey - Software Management Automation">chocolatey</a>，windows下的包管理工具。<br>
官网提供了几种安装方式，我常用cmd的方式安装：</p>
<pre><code class="language-shell">@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;
</code></pre>
<ul>
<li>切记一定要在管理员身份运行下的终端里使用，不然会报无法reach的错。</li>
</ul>
<p>安装成功之后就可以愉快的使用巧克力了。<br>
使用巧克力安装软件：</p>
<pre><code class="language-shell">choco install nodejs
npm install hexo-cli -g
</code></pre>
<p>当然<code>choco install</code>可以简写为<code>cinst</code></p>
]]></content>
    </entry>
</feed>